-- VHDL Entity project2_lib.mycpuB.symbol
--
-- Created:
--          by - mg217.bin (cparch08.ecn.purdue.edu)
--          at - 20:09:56 04/08/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY mycpu IS
   PORT( 
      CLK      : IN     std_logic;
      nReset   : IN     std_logic;
      ramQ     : IN     std_logic_vector (31 DOWNTO 0);
      ramState : IN     std_logic_vector (1 DOWNTO 0);
      halt     : OUT    std_logic;
      ramAddr  : OUT    std_logic_vector (15 DOWNTO 0);
      ramData  : OUT    std_logic_vector (31 DOWNTO 0);
      ramRen   : OUT    std_logic;
      ramWen   : OUT    std_logic
   );

-- Declarations

END mycpu ;

--
-- VHDL Architecture project2_lib.mycpuB.struct
--
-- Created:
--          by - mg217.bin (cparch08.ecn.purdue.edu)
--          at - 20:09:56 04/08/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;



ARCHITECTURE struct OF mycpu IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALUSrcShamt      : std_logic;
   SIGNAL ALUSrcShamt1     : std_logic;
   SIGNAL AluSrc           : std_logic;
   SIGNAL AluSrc1          : std_logic;
   SIGNAL Aout             : std_logic_vector(31 DOWNTO 0);
   SIGNAL Aout1            : std_logic_vector(31 DOWNTO 0);
   SIGNAL B                : std_logic_vector(31 DOWNTO 0);
   SIGNAL B1               : std_logic_vector(31 DOWNTO 0);
   SIGNAL B2               : std_logic_vector(31 DOWNTO 0);
   SIGNAL B3               : std_logic_vector(31 DOWNTO 0);
   SIGNAL B4               : std_logic_vector(31 DOWNTO 0);
   SIGNAL B5               : std_logic_vector(31 DOWNTO 0);
   SIGNAL B6               : std_logic_vector(31 DOWNTO 0);
   SIGNAL B7               : std_logic_vector(31 DOWNTO 0);
   SIGNAL BEQ              : std_logic;
   SIGNAL BEQ1             : std_logic;
   SIGNAL BNE              : std_logic;
   SIGNAL BNE1             : std_logic;
   SIGNAL Bout             : std_logic_vector(31 DOWNTO 0);
   SIGNAL Bout1            : std_logic_vector(31 DOWNTO 0);
   SIGNAL Cin1             : std_logic;
   SIGNAL Cin2             : std_logic;
   SIGNAL Cin3             : std_logic;
   SIGNAL Cin4             : std_logic;
   SIGNAL I1               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I10              : std_logic_vector(31 DOWNTO 0);
   SIGNAL I2               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I3               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I4               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I5               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I6               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I7               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I8               : std_logic_vector(31 DOWNTO 0);
   SIGNAL I9               : std_logic_vector(31 DOWNTO 0);
   SIGNAL ImmWrite         : std_logic;
   SIGNAL ImmWrite1        : std_logic;
   SIGNAL Jump             : std_logic;
   SIGNAL Jump1            : std_logic;
   SIGNAL Link             : std_logic;
   SIGNAL Link1            : std_logic;
   SIGNAL MemToReg         : std_logic;
   SIGNAL MemToReg1        : std_logic;
   SIGNAL MemWrite         : std_logic;
   SIGNAL MemWrite1        : std_logic;
   SIGNAL OutZero          : std_logic;
   SIGNAL OutZero1         : std_logic;
   SIGNAL RegJump          : std_logic;
   SIGNAL RegJump1         : std_logic;
   SIGNAL RegSel           : std_logic;
   SIGNAL RegSel1          : std_logic;
   SIGNAL RegWrite         : std_logic;
   SIGNAL RegWrite1        : std_logic;
   SIGNAL SC               : std_logic;
   SIGNAL SC1              : std_logic;
   SIGNAL SLT              : std_logic;
   SIGNAL SLT1             : std_logic;
   SIGNAL SignExt          : std_logic;
   SIGNAL SignExt1         : std_logic;
   SIGNAL Sout             : std_logic_vector(31 DOWNTO 0);
   SIGNAL Sout1            : std_logic_vector(31 DOWNTO 0);
   SIGNAL Sout2            : std_logic_vector(31 DOWNTO 0);
   SIGNAL Sout3            : std_logic_vector(31 DOWNTO 0);
   SIGNAL actionAddr0      : std_logic_vector(31 DOWNTO 0);
   SIGNAL actionAddr1      : std_logic_vector(31 DOWNTO 0);
   SIGNAL actionWrite0     : std_logic;
   SIGNAL actionWrite1     : std_logic;
   SIGNAL aluop            : std_logic_vector(2 DOWNTO 0);
   SIGNAL aluop1           : std_logic_vector(2 DOWNTO 0);
   SIGNAL d_ll             : std_logic;
   SIGNAL d_ll1            : std_logic;
   SIGNAL d_memtoReg       : std_logic;
   SIGNAL d_memtoReg1      : std_logic;
   SIGNAL d_regWrite       : std_logic;
   SIGNAL d_regWrite1      : std_logic;
   SIGNAL d_regWrite2      : std_logic;
   SIGNAL d_regWrite3      : std_logic;
   SIGNAL d_sc             : std_logic;
   SIGNAL dataIn0          : std_logic_vector(31 DOWNTO 0);
   SIGNAL dataIn1          : std_logic_vector(31 DOWNTO 0);
   SIGNAL dataOut          : std_logic_vector(31 DOWNTO 0);
   SIGNAL dataOut0         : std_logic_vector(31 DOWNTO 0);
   SIGNAL dataOut1         : std_logic_vector(31 DOWNTO 0);
   SIGNAL dataOut2         : std_logic_vector(31 DOWNTO 0);
   SIGNAL din              : std_logic;
   SIGNAL din0             : std_logic;
   SIGNAL din1             : std_logic;
   SIGNAL din2             : std_logic;
   SIGNAL din3             : std_logic;
   SIGNAL din4             : std_logic;
   SIGNAL din5             : std_logic;
   SIGNAL din6             : std_logic;
   SIGNAL dirty0           : std_logic;
   SIGNAL dirty1           : std_logic;
   SIGNAL dout             : std_logic;
   SIGNAL dout1            : std_logic;
   SIGNAL dout10           : std_logic;
   SIGNAL dout11           : std_logic;
   SIGNAL dout12           : std_logic;
   SIGNAL dout13           : std_logic;
   SIGNAL dout14           : std_logic;
   SIGNAL dout15           : std_logic;
   SIGNAL dout16           : std_logic;
   SIGNAL dout17           : std_logic;
   SIGNAL dout18           : std_logic;
   SIGNAL dout19           : std_logic;
   SIGNAL dout2            : std_logic;
   SIGNAL dout20           : std_logic;
   SIGNAL dout21           : std_logic;
   SIGNAL dout22           : std_logic;
   SIGNAL dout3            : std_logic;
   SIGNAL dout4            : std_logic;
   SIGNAL dout5            : std_logic;
   SIGNAL dout6            : std_logic;
   SIGNAL dout7            : std_logic;
   SIGNAL dout8            : std_logic;
   SIGNAL dout9            : std_logic;
   SIGNAL dready0          : std_logic;
   SIGNAL dready1          : std_logic;
   SIGNAL dump_complete    : std_logic;
   SIGNAL dump_complete1   : std_logic;
   SIGNAL fw2A             : std_logic;
   SIGNAL fw2A1            : std_logic;
   SIGNAL fw2B             : std_logic;
   SIGNAL fw2B1            : std_logic;
   SIGNAL halt1            : std_logic;
   SIGNAL halt2            : std_logic;
   SIGNAL ins              : std_logic_vector(31 DOWNTO 0);
   SIGNAL ins0             : std_logic_vector(31 DOWNTO 0);
   SIGNAL ins1             : std_logic_vector(31 DOWNTO 0);
   SIGNAL ins2             : std_logic_vector(31 DOWNTO 0);
   SIGNAL invalidate0      : std_logic;
   SIGNAL invalidate1      : std_logic;
   SIGNAL invalidate_addr0 : std_logic_vector(31 DOWNTO 0);
   SIGNAL invalidate_addr1 : std_logic_vector(31 DOWNTO 0);
   SIGNAL iread            : std_logic;
   SIGNAL iread1           : std_logic;
   SIGNAL iready0          : std_logic;
   SIGNAL iready1          : std_logic;
   SIGNAL ll               : std_logic;
   SIGNAL loadDep          : std_logic;
   SIGNAL loadDep1         : std_logic;
   SIGNAL memRead0         : std_logic;
   SIGNAL memRead1         : std_logic;
   SIGNAL memToReg2        : std_logic;
   SIGNAL memWrite0        : std_logic;
   SIGNAL memWrite2        : std_logic;
   SIGNAL mem_addr         : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL mem_addr1        : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL mempc            : std_logic_vector(15 DOWNTO 0);
   SIGNAL mempc1           : std_logic_vector(15 DOWNTO 0);
   SIGNAL negI             : std_logic;
   SIGNAL negI1            : std_logic;
   SIGNAL nen1             : std_logic;
   SIGNAL nen2             : std_logic;
   SIGNAL out31            : std_logic_vector(4 DOWNTO 0);
   SIGNAL out32            : std_logic_vector(4 DOWNTO 0);
   SIGNAL output           : std_logic_vector(31 DOWNTO 0);
   SIGNAL output1          : std_logic_vector(31 DOWNTO 0);
   SIGNAL output10         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output11         : std_logic_vector(4 DOWNTO 0);
   SIGNAL output12         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output13         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output14         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output15         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output16         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output17         : std_logic_vector(4 DOWNTO 0);
   SIGNAL output18         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output19         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output2          : std_logic_vector(31 DOWNTO 0);
   SIGNAL output20         : std_logic_vector(4 DOWNTO 0);
   SIGNAL output21         : std_logic_vector(4 DOWNTO 0);
   SIGNAL output22         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output23         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output24         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output25         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output26         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output27         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output28         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output29         : std_logic_vector(31 DOWNTO 0);
   SIGNAL output3          : std_logic_vector(4 DOWNTO 0);
   SIGNAL output4          : std_logic_vector(31 DOWNTO 0);
   SIGNAL output5          : std_logic_vector(31 DOWNTO 0);
   SIGNAL output6          : std_logic_vector(4 DOWNTO 0);
   SIGNAL output7          : std_logic_vector(31 DOWNTO 0);
   SIGNAL output8          : std_logic_vector(31 DOWNTO 0);
   SIGNAL output9          : std_logic_vector(31 DOWNTO 0);
   SIGNAL pc_sig           : std_logic_vector(31 DOWNTO 0);
   SIGNAL pc_sig1          : std_logic_vector(31 DOWNTO 0);
   SIGNAL pcinc4           : std_logic_vector(31 DOWNTO 0);
   SIGNAL pcinc5           : std_logic_vector(31 DOWNTO 0);
   SIGNAL pcjump           : std_logic_vector(31 DOWNTO 0);
   SIGNAL pcjump1          : std_logic_vector(31 DOWNTO 0);
   SIGNAL pcout            : std_logic_vector(31 DOWNTO 0);
   SIGNAL pcout1           : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_A              : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_A1             : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_AluOp          : std_logic_vector(2 DOWNTO 0);
   SIGNAL q_AluOp1         : std_logic_vector(2 DOWNTO 0);
   SIGNAL q_AluSrc         : std_logic;
   SIGNAL q_AluSrc1        : std_logic;
   SIGNAL q_AluSrcShamt    : std_logic;
   SIGNAL q_AluSrcShamt1   : std_logic;
   SIGNAL q_B              : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_B1             : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_B2             : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_B3             : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_SLT2           : std_logic;
   SIGNAL q_SLT3           : std_logic;
   SIGNAL q_fwA            : std_logic;
   SIGNAL q_fwA1           : std_logic;
   SIGNAL q_fwB            : std_logic;
   SIGNAL q_fwB1           : std_logic;
   SIGNAL q_halt           : std_logic;
   SIGNAL q_halt1          : std_logic;
   SIGNAL q_halt2          : std_logic;
   SIGNAL q_halt3          : std_logic;
   SIGNAL q_halt4          : std_logic;
   SIGNAL q_halt5          : std_logic;
   SIGNAL q_halt6          : std_logic;
   SIGNAL q_halt7          : std_logic;
   SIGNAL q_immWrite1      : std_logic;
   SIGNAL q_immWrite2      : std_logic;
   SIGNAL q_ins            : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_ins1           : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_link1          : std_logic;
   SIGNAL q_link2          : std_logic;
   SIGNAL q_ll             : std_logic;
   SIGNAL q_ll1            : std_logic;
   SIGNAL q_ll2            : std_logic;
   SIGNAL q_memWrite       : std_logic;
   SIGNAL q_memWrite1      : std_logic;
   SIGNAL q_memWrite2      : std_logic;
   SIGNAL q_memWrite3      : std_logic;
   SIGNAL q_memtoReg       : std_logic;
   SIGNAL q_memtoReg1      : std_logic;
   SIGNAL q_pc             : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_pc1            : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_pc2            : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_pc3            : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_regDest        : std_logic_vector(4 DOWNTO 0);
   SIGNAL q_regDest1       : std_logic_vector(4 DOWNTO 0);
   SIGNAL q_regDest2       : std_logic_vector(4 DOWNTO 0);
   SIGNAL q_regDest3       : std_logic_vector(4 DOWNTO 0);
   SIGNAL q_regWrite       : std_logic;
   SIGNAL q_regWrite1      : std_logic;
   SIGNAL q_result         : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_result1        : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_sc             : std_logic;
   SIGNAL q_sc1            : std_logic;
   SIGNAL q_sc2            : std_logic;
   SIGNAL q_shamt          : std_logic_vector(31 DOWNTO 0);
   SIGNAL q_shamt1         : std_logic_vector(31 DOWNTO 0);
   SIGNAL rdat3            : std_logic_vector(31 DOWNTO 0);
   SIGNAL rdat4            : std_logic_vector(31 DOWNTO 0);
   SIGNAL rdat5            : std_logic_vector(31 DOWNTO 0);
   SIGNAL rdat6            : std_logic_vector(31 DOWNTO 0);
   SIGNAL rstAddr0         : std_logic_vector(31 DOWNTO 0);
   SIGNAL rstAddr1         : std_logic_vector(31 DOWNTO 0);
   SIGNAL sc_result        : std_logic;
   SIGNAL sc_result1       : std_logic;
   SIGNAL shamtext         : std_logic_vector(31 DOWNTO 0);
   SIGNAL shamtext1        : std_logic_vector(31 DOWNTO 0);
   SIGNAL slt_out1         : std_logic_vector(31 DOWNTO 0);
   SIGNAL slt_out2         : std_logic_vector(31 DOWNTO 0);
   SIGNAL snoopAddr0       : std_logic_vector(31 DOWNTO 0);
   SIGNAL snoopAddr1       : std_logic_vector(31 DOWNTO 0);
   SIGNAL snoopData0       : std_logic_vector(31 DOWNTO 0);
   SIGNAL snoopData1       : std_logic_vector(31 DOWNTO 0);
   SIGNAL snoopHit0        : std_logic;
   SIGNAL snoopHit1        : std_logic;
   SIGNAL valid0           : std_logic;
   SIGNAL valid1           : std_logic;
   SIGNAL wdat             : std_logic_vector(31 DOWNTO 0);
   SIGNAL wdat1            : std_logic_vector(31 DOWNTO 0);


   -- Component Declarations
   COMPONENT addr32Bit
   PORT (
      A        : IN     std_logic_vector (31 DOWNTO 0);
      B        : IN     std_logic_vector (31 DOWNTO 0);
      Cin      : IN     std_logic;
      OVERFLOW : OUT    std_logic;
      Sout     : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT alu
   PORT (
      A        : IN     std_logic_vector (31 DOWNTO 0);
      B        : IN     std_logic_vector (31 DOWNTO 0);
      opcode   : IN     std_logic_vector (2 DOWNTO 0);
      negative : OUT    std_logic;
      output   : OUT    std_logic_vector (31 DOWNTO 0);
      overflow : OUT    std_logic;
      zero     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT coco
   PORT (
      actionAddr0      : IN     std_logic_vector (31 DOWNTO 0);
      actionAddr1      : IN     std_logic_vector (31 DOWNTO 0);
      actionWrite0     : IN     std_logic;
      actionWrite1     : IN     std_logic;
      addrIn0          : IN     std_logic_vector (31 DOWNTO 0);
      addrIn1          : IN     std_logic_vector (31 DOWNTO 0);
      clk              : IN     std_logic;
      dataIn0          : IN     std_logic_vector (31 DOWNTO 0);
      dataIn1          : IN     std_logic_vector (31 DOWNTO 0);
      dirty0           : IN     std_logic;
      dirty1           : IN     std_logic;
      iread0           : IN     std_logic;
      iread1           : IN     std_logic;
      memQ             : IN     std_logic_vector (31 DOWNTO 0);
      memRead0         : IN     std_logic;
      memRead1         : IN     std_logic;
      memState         : IN     std_logic_vector (1 DOWNTO 0);
      memWrite0        : IN     std_logic;
      memWrite1        : IN     std_logic;
      nrst             : IN     std_logic;
      pc0              : IN     std_logic_vector (31 DOWNTO 0);
      pc1              : IN     std_logic_vector (31 DOWNTO 0);
      snoopData0       : IN     std_logic_vector (31 DOWNTO 0);
      snoopData1       : IN     std_logic_vector (31 DOWNTO 0);
      snoopHit0        : IN     std_logic;
      snoopHit1        : IN     std_logic;
      valid0           : IN     std_logic;
      valid1           : IN     std_logic;
      dataOut0         : OUT    std_logic_vector (31 DOWNTO 0);
      dataOut1         : OUT    std_logic_vector (31 DOWNTO 0);
      dready0          : OUT    std_logic;
      dready1          : OUT    std_logic;
      ins0             : OUT    std_logic_vector (31 DOWNTO 0);
      ins1             : OUT    std_logic_vector (31 DOWNTO 0);
      invalidate0      : OUT    std_logic;
      invalidate1      : OUT    std_logic;
      invalidate_addr0 : OUT    std_logic_vector (31 DOWNTO 0);
      invalidate_addr1 : OUT    std_logic_vector (31 DOWNTO 0);
      iready0          : OUT    std_logic;
      iready1          : OUT    std_logic;
      memAddr          : OUT    std_logic_vector (15 DOWNTO 0);
      memData          : OUT    std_logic_vector (31 DOWNTO 0);
      memRden          : OUT    std_logic;
      memWren          : OUT    std_logic;
      snoopAddr0       : OUT    std_logic_vector (31 DOWNTO 0);
      snoopAddr1       : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ctrl
   PORT (
      ins         : IN     std_logic_vector (31 DOWNTO 0);
      ALUSrcShamt : OUT    std_logic;
      AluSrc      : OUT    std_logic;
      BEQ         : OUT    std_logic;
      BNE         : OUT    std_logic;
      ImmWrite    : OUT    std_logic;
      Jump        : OUT    std_logic;
      LL          : OUT    std_logic;
      Link        : OUT    std_logic;
      MemToReg    : OUT    std_logic;
      MemWrite    : OUT    std_logic;
      RegJump     : OUT    std_logic;
      RegSel      : OUT    std_logic;
      RegWrite    : OUT    std_logic;
      SC          : OUT    std_logic;
      SLT         : OUT    std_logic;
      SignExt     : OUT    std_logic;
      aluop       : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT dram
   PORT (
      clk           : IN     std_logic;
      cpu_addr      : IN     std_logic_vector (31 DOWNTO 0);
      cpu_ren       : IN     std_logic;
      cpu_wdata     : IN     std_logic_vector (31 DOWNTO 0);
      cpu_wen       : IN     std_logic;
      dready        : IN     std_logic;
      dump          : IN     std_logic;
      invalid_addr  : IN     std_logic_vector (31 DOWNTO 0);
      invalidate    : IN     std_logic;
      ll            : IN     std_logic;
      mem_rdat      : IN     std_logic_vector (31 DOWNTO 0);
      nrst          : IN     std_logic;
      sc            : IN     std_logic;
      snoopAddr     : IN     std_logic_vector (31 DOWNTO 0);
      cpu_rdata     : OUT    std_logic_vector (31 DOWNTO 0);
      dirtyOut      : OUT    std_logic;
      dump_complete : OUT    std_logic;
      dwait         : OUT    std_logic;
      mem_addr      : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      mem_ren       : OUT    std_logic;
      mem_wdat      : OUT    std_logic_vector (31 DOWNTO 0);
      mem_wen       : OUT    std_logic;
      sc_result     : OUT    std_logic;
      snoopData     : OUT    std_logic_vector (31 DOWNTO 0);
      snoopHit      : OUT    std_logic;
      validOut      : OUT    std_logic;
      writeAction   : OUT    std_logic;
      writeAddr     : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ext16Bit
   PORT (
      I      : IN     std_logic_vector (15 DOWNTO 0);
      signed : IN     std_logic;
      output : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT fwdUnit
   PORT (
      -- pending write registers
      pendWr1     : IN     std_logic_vector (4 DOWNTO 0);
      pendWr2     : IN     std_logic_vector (4 DOWNTO 0);
      pendWr1Data : IN     std_logic_vector (31 DOWNTO 0);
      pendWr2Data : IN     std_logic_vector (31 DOWNTO 0);
      memToReg1   : IN     std_logic ;
      memToReg2   : IN     std_logic ;
      regWrite1   : IN     std_logic ;
      regWrite2   : IN     std_logic ;
      rselA       : IN     std_logic_vector (4 DOWNTO 0);
      rdatA       : IN     std_logic_vector (31 DOWNTO 0);
      rselB       : IN     std_logic_vector (4 DOWNTO 0);
      rdatB       : IN     std_logic_vector (31 DOWNTO 0);
      Aout        : OUT    std_logic_vector (31 DOWNTO 0);
      Bout        : OUT    std_logic_vector (31 DOWNTO 0);
      fw2A        : OUT    std_logic ;
      fw2B        : OUT    std_logic ;
      loadDep1    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT icache2
   PORT (
      clk       : IN     std_logic;
      dataready : IN     std_logic;
      memins    : IN     std_logic_vector (31 DOWNTO 0);
      nrst      : IN     std_logic;
      pc        : IN     std_logic_vector (31 DOWNTO 0);
      ins       : OUT    std_logic_vector (31 DOWNTO 0);
      iread     : OUT    std_logic;
      mempc     : OUT    std_logic_vector (15 DOWNTO 0);
      pcwait    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT mux32
   PORT (
      I0     : IN     std_logic_vector (31 DOWNTO 0);
      I1     : IN     std_logic_vector (31 DOWNTO 0);
      sel    : IN     std_logic;
      output : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mux5
   PORT (
      I0     : IN     std_logic_vector (4 DOWNTO 0);
      I1     : IN     std_logic_vector (4 DOWNTO 0);
      sel    : IN     std_logic;
      output : OUT    std_logic_vector (4 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT pc
   PORT (
      D       : IN     std_logic_vector (31 DOWNTO 0);
      clk     : IN     std_logic;
      halt    : IN     std_logic;
      nRst    : IN     std_logic;
      rstAddr : IN     std_logic_vector (31 DOWNTO 0);
      output  : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT reg_EX_MEM
   PORT (
      clk        : IN     std_logic;
      d_B        : IN     std_logic_vector (31 DOWNTO 0);
      d_halt     : IN     std_logic;
      d_ll       : IN     std_logic;
      d_memWrite : IN     std_logic;
      d_memtoReg : IN     std_logic;
      d_regDest  : IN     std_logic_vector (4 DOWNTO 0);
      d_regWrite : IN     std_logic;
      d_result   : IN     std_logic_vector (31 DOWNTO 0);
      d_sc       : IN     std_logic;
      nReset     : IN     std_logic;
      nen        : IN     std_logic;
      noop       : IN     std_logic;
      q_B        : OUT    std_logic_vector (31 DOWNTO 0);
      q_halt     : OUT    std_logic;
      q_ll       : OUT    std_logic;
      q_memWrite : OUT    std_logic;
      q_memtoReg : OUT    std_logic;
      q_regDest  : OUT    std_logic_vector (4 DOWNTO 0);
      q_regWrite : OUT    std_logic;
      q_result   : OUT    std_logic_vector (31 DOWNTO 0);
      q_sc       : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT reg_ID_EX
   PORT (
      clk           : IN     std_logic;
      d_A           : IN     std_logic_vector (31 DOWNTO 0);
      d_AluOp       : IN     std_logic_vector (2 DOWNTO 0);
      d_AluSrc      : IN     std_logic;
      d_AluSrcShamt : IN     std_logic;
      d_B           : IN     std_logic_vector (31 DOWNTO 0);
      d_SLT         : IN     std_logic;
      d_fwA         : IN     std_logic;
      d_fwB         : IN     std_logic;
      d_halt        : IN     std_logic;
      d_imm         : IN     std_logic_vector (31 DOWNTO 0);
      d_immWrite    : IN     std_logic;
      d_link        : IN     std_logic;
      d_ll          : IN     std_logic;
      d_memWrite    : IN     std_logic;
      d_memtoReg    : IN     std_logic;
      d_pc          : IN     std_logic_vector (31 DOWNTO 0);
      d_regDest     : IN     std_logic_vector (4 DOWNTO 0);
      d_regWrite    : IN     std_logic;
      d_sc          : IN     std_logic;
      d_shamt       : IN     std_logic_vector (31 DOWNTO 0);
      nReset        : IN     std_logic;
      nen           : IN     std_logic;
      noop          : IN     std_logic;
      q_A           : OUT    std_logic_vector (31 DOWNTO 0);
      q_AluOp       : OUT    std_logic_vector (2 DOWNTO 0);
      q_AluSrc      : OUT    std_logic;
      q_AluSrcShamt : OUT    std_logic;
      q_B           : OUT    std_logic_vector (31 DOWNTO 0);
      q_SLT         : OUT    std_logic;
      q_fwA         : OUT    std_logic;
      q_fwB         : OUT    std_logic;
      q_halt        : OUT    std_logic;
      q_imm         : OUT    std_logic_vector (31 DOWNTO 0);
      q_immWrite    : OUT    std_logic;
      q_link        : OUT    std_logic;
      q_ll          : OUT    std_logic;
      q_memWrite    : OUT    std_logic;
      q_memtoReg    : OUT    std_logic;
      q_pc          : OUT    std_logic_vector (31 DOWNTO 0);
      q_regDest     : OUT    std_logic_vector (4 DOWNTO 0);
      q_regWrite    : OUT    std_logic;
      q_sc          : OUT    std_logic;
      q_shamt       : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT reg_IF_ID
   PORT (
      clk    : IN     std_logic;
      d_halt : IN     std_logic;
      d_ins  : IN     std_logic_vector (31 DOWNTO 0);
      d_pc   : IN     std_logic_vector (31 DOWNTO 0);
      nReset : IN     std_logic;
      nen    : IN     std_logic;
      noop   : IN     std_logic;
      q_halt : OUT    std_logic;
      q_ins  : OUT    std_logic_vector (31 DOWNTO 0);
      q_pc   : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT reg_MEM_WB
   PORT (
      clk        : IN     std_logic;
      d_Q        : IN     std_logic_vector (31 DOWNTO 0);
      d_halt     : IN     std_logic;
      d_regDest  : IN     std_logic_vector (4 DOWNTO 0);
      d_regWrite : IN     std_logic;
      nReset     : IN     std_logic;
      nen        : IN     std_logic;
      noop       : IN     std_logic;
      q_Q        : OUT    std_logic_vector (31 DOWNTO 0);
      q_halt     : OUT    std_logic;
      q_regDest  : OUT    std_logic_vector (4 DOWNTO 0);
      q_regWrite : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT registerFile
   PORT (
      clk    : IN     std_logic;
      nReset : IN     std_logic;
      rsel1  : IN     std_logic_vector (4 DOWNTO 0);
      rsel2  : IN     std_logic_vector (4 DOWNTO 0);
      wdat   : IN     std_logic_vector (31 DOWNTO 0);
      wen    : IN     std_logic;
      wsel   : IN     std_logic_vector (4 DOWNTO 0);
      rdat1  : OUT    std_logic_vector (31 DOWNTO 0);
      rdat2  : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 pcinc4
   -- pcinc4 1       
   pcinc4 <= x"00000004";                                 

   -- HDL Embedded Text Block 2 HaltDetect
   -- HaltDetect
   halt1 <= '1' when (ins = x"FFFFFFFF" and dout2 = '0') else '0';                                        
   

   -- HDL Embedded Text Block 3 PCJump
   -- Jump PC
   pcjump <= q_pc(31 downto 28) & q_ins(25 downto 0) & "00"; 
                                          

   -- HDL Embedded Text Block 4 ShamtExt
   -- Jump PC
   shamtext <= x"000000" & "000" & q_ins(10 downto 6); 
                                          

   -- HDL Embedded Text Block 5 eb1
   -- eb1 5  
   Cin1 <= '1';                                      

   -- HDL Embedded Text Block 6 eb2
   -- eb2 6                                        
   B2 <= not Bout;

   -- HDL Embedded Text Block 7 eb3
   -- eb3 7
   pcout <= x"0000" & mempc;
                                         

   -- HDL Embedded Text Block 8 eb4
   -- eb4 8 
   OutZero <= '0';                                       

   -- HDL Embedded Text Block 9 pcinc5
   -- pcinc4 1       
   pcinc5 <= x"00000004";                                 

   -- HDL Embedded Text Block 10 HaltDetect1
   -- HaltDetect
   halt2 <= '1' when (ins1 = x"FFFFFFFF" and dout15 = '0') else '0';                                        
   
   
   

   -- HDL Embedded Text Block 11 shift17
   -- eb5 9          
   B3 <= q_B1(15 downto 0) & x"0000";                              

   -- HDL Embedded Text Block 12 eb5
   -- eb3 7
   pcout1 <= x"0000" & mempc1;
                                         
   
   

   -- HDL Embedded Text Block 13 eb6
   -- eb1 5
   din <= '1' when (Sout2 = x"00000000") else '0';

   -- HDL Embedded Text Block 14 eb7
   -- eb2 6    
   B1 <= output2(29 downto 0) & "00";
   Cin2 <= '0';                                    
   
   

   -- HDL Embedded Text Block 15 S32
   -- eb5 11      
   out31 <= "11111";                                  

   -- HDL Embedded Text Block 16 neg33
   -- eb5 10       
   slt_out1 <= x"0000000" & "000" & negI;                                 

   -- HDL Embedded Text Block 17 PCJump1
   -- Jump PC
   pcjump1 <= q_pc1(31 downto 28) & q_ins1(25 downto 0) & "00"; 
                                          

   -- HDL Embedded Text Block 18 ShamtExt1
   -- Jump 1PC
   shamtext1 <= x"000000" & "000" & q_ins1(10 downto 6); 
                                          
   

   -- HDL Embedded Text Block 19 eb8
   -- eb2 6    
   B5 <= output16(29 downto 0) & "00";
   Cin4 <= '0';                                    
   
   
   

   -- HDL Embedded Text Block 20 eb9
   -- eb1 5
   din3 <= '1' when (Sout3 = x"00000000") else '0';

   -- HDL Embedded Text Block 21 eb10
   -- eb2 6                                        
   B6 <= not Bout1;
   

   -- HDL Embedded Text Block 22 eb11
   -- eb1 5  
   Cin3 <= '1';                                      

   -- HDL Embedded Text Block 23 S33
   -- eb5 11      
   out32 <= "11111";                                  

   -- HDL Embedded Text Block 24 shift18
   -- eb5 9          
   B7 <= q_B2(15 downto 0) & x"0000";                              
   

   -- HDL Embedded Text Block 25 neg34
   -- eb5 10       
   slt_out2 <= x"0000000" & "000" & negI1;                                 
   

   -- HDL Embedded Text Block 26 eb12
   -- eb4 8 
   OutZero1 <= '0';                                       

   -- HDL Embedded Text Block 27 pcinc6
   -- pcinc4 1       
   rstAddr0 <= x"00000000";                                 

   -- HDL Embedded Text Block 28 pcinc7
   -- pcinc4 1       
   rstAddr1 <= x"00000200";                                 
   

   -- HDL Embedded Text Block 29 eb13
   I9 <= x"0000000" & "000" & sc_result;

   -- HDL Embedded Text Block 30 eb14
   I10 <= x"0000000" & "000" & sc_result1;
   


   -- ModuleWare code(v1.9) for instance 'U_83' of 'and'
   halt <= dump_complete AND dump_complete1;

   -- ModuleWare code(v1.9) for instance 'U_33' of 'inv'
   dout6 <= NOT(din);

   -- ModuleWare code(v1.9) for instance 'U_64' of 'inv'
   dout11 <= NOT(din3);

   -- ModuleWare code(v1.9) for instance 'U_34' of 'nand'
   din2 <= NOT(BEQ AND din);

   -- ModuleWare code(v1.9) for instance 'U_35' of 'nand'
   dout7 <= NOT(dout6 AND BNE);

   -- ModuleWare code(v1.9) for instance 'U_36' of 'nand'
   dout8 <= NOT(din2 AND dout7);

   -- ModuleWare code(v1.9) for instance 'U_60' of 'nand'
   dout13 <= NOT(din4 AND dout12);

   -- ModuleWare code(v1.9) for instance 'U_61' of 'nand'
   dout12 <= NOT(dout11 AND BNE1);

   -- ModuleWare code(v1.9) for instance 'U_62' of 'nand'
   din4 <= NOT(BEQ1 AND din3);

   -- ModuleWare code(v1.9) for instance 'U_4' of 'or'
   dout <= dout3 OR halt1;

   -- ModuleWare code(v1.9) for instance 'U_13' of 'or'
   dout3 <= nen1 OR dout9;

   -- ModuleWare code(v1.9) for instance 'U_15' of 'or'
   dout1 <= Jump OR RegJump;

   -- ModuleWare code(v1.9) for instance 'U_21' of 'or'
   din1 <= din0 OR loadDep;

   -- ModuleWare code(v1.9) for instance 'U_27' of 'or'
   dout2 <= dout1 OR dout8;

   -- ModuleWare code(v1.9) for instance 'U_28' of 'or'
   dout4 <= nen1 OR din1;

   -- ModuleWare code(v1.9) for instance 'U_29' of 'or'
   dout5 <= din0 OR nen1;

   -- ModuleWare code(v1.9) for instance 'U_31' of 'or'
   dout9 <= din0 OR loadDep;

   -- ModuleWare code(v1.9) for instance 'U_41' of 'or'
   dout10 <= dout16 OR halt2;

   -- ModuleWare code(v1.9) for instance 'U_42' of 'or'
   dout16 <= nen2 OR dout19;

   -- ModuleWare code(v1.9) for instance 'U_46' of 'or'
   dout19 <= din6 OR loadDep1;

   -- ModuleWare code(v1.9) for instance 'U_49' of 'or'
   dout17 <= nen2 OR din5;

   -- ModuleWare code(v1.9) for instance 'U_51' of 'or'
   din5 <= din6 OR loadDep1;

   -- ModuleWare code(v1.9) for instance 'U_56' of 'or'
   dout15 <= dout14 OR dout13;

   -- ModuleWare code(v1.9) for instance 'U_58' of 'or'
   dout14 <= Jump1 OR RegJump1;

   -- ModuleWare code(v1.9) for instance 'U_70' of 'or'
   dout18 <= din6 OR nen2;

   -- ModuleWare code(v1.9) for instance 'U_86' of 'or1'
   dout20 <= q_sc2 OR q_memtoReg;

   -- ModuleWare code(v1.9) for instance 'U_87' of 'or1'
   memToReg2 <= d_sc OR d_memtoReg;

   -- ModuleWare code(v1.9) for instance 'U_88' of 'or1'
   dout21 <= q_sc OR d_memtoReg1;

   -- ModuleWare code(v1.9) for instance 'U_89' of 'or1'
   dout22 <= q_sc1 OR q_memtoReg1;

   -- Instance port mappings.
   U_2 : addr32Bit
      PORT MAP (
         A        => pc_sig,
         B        => pcinc4,
         Cin      => pcinc4(31),
         Sout     => Sout,
         OVERFLOW => OPEN
      );
   U_32 : addr32Bit
      PORT MAP (
         A        => Aout,
         B        => B2,
         Cin      => Cin1,
         Sout     => Sout2,
         OVERFLOW => OPEN
      );
   U_37 : addr32Bit
      PORT MAP (
         A        => B1,
         B        => output5,
         Cin      => Cin2,
         Sout     => I3,
         OVERFLOW => OPEN
      );
   U_47 : addr32Bit
      PORT MAP (
         A        => pc_sig1,
         B        => pcinc5,
         Cin      => pcinc5(31),
         Sout     => Sout1,
         OVERFLOW => OPEN
      );
   U_59 : addr32Bit
      PORT MAP (
         A        => B5,
         B        => output19,
         Cin      => Cin4,
         Sout     => I5,
         OVERFLOW => OPEN
      );
   U_66 : addr32Bit
      PORT MAP (
         A        => Aout1,
         B        => B6,
         Cin      => Cin3,
         Sout     => Sout3,
         OVERFLOW => OPEN
      );
   U_16 : alu
      PORT MAP (
         opcode   => q_AluOp,
         A        => output10,
         B        => output8,
         output   => I4,
         negative => negI,
         overflow => OPEN,
         zero     => OPEN
      );
   U_78 : alu
      PORT MAP (
         opcode   => q_AluOp1,
         A        => output26,
         B        => output24,
         output   => I8,
         negative => negI1,
         overflow => OPEN,
         zero     => OPEN
      );
   U_5 : coco
      PORT MAP (
         addrIn0          => mem_addr,
         dataIn0          => dataIn0,
         memRead0         => memRead0,
         memWrite0        => memWrite0,
         dataOut0         => dataOut0,
         dready0          => dready0,
         valid0           => valid0,
         dirty0           => dirty0,
         invalidate0      => invalidate0,
         invalidate_addr0 => invalidate_addr0,
         actionAddr0      => actionAddr0,
         actionWrite0     => actionWrite0,
         snoopData0       => snoopData0,
         snoopAddr0       => snoopAddr0,
         snoopHit0        => snoopHit0,
         pc0              => pcout,
         iread0           => iread,
         ins0             => ins0,
         iready0          => iready0,
         addrIn1          => mem_addr1,
         dataIn1          => dataIn1,
         memRead1         => memRead1,
         memWrite1        => memWrite2,
         dataOut1         => dataOut2,
         dready1          => dready1,
         valid1           => valid1,
         dirty1           => dirty1,
         invalidate1      => invalidate1,
         invalidate_addr1 => invalidate_addr1,
         actionAddr1      => actionAddr1,
         actionWrite1     => actionWrite1,
         snoopData1       => snoopData1,
         snoopAddr1       => snoopAddr1,
         snoopHit1        => snoopHit1,
         pc1              => pcout1,
         iread1           => iread1,
         ins1             => ins2,
         iready1          => iready1,
         memAddr          => ramAddr,
         memData          => ramData,
         memWren          => ramWen,
         memRden          => ramRen,
         memQ             => ramQ,
         memState         => ramState,
         clk              => CLK,
         nrst             => nReset
      );
   U_7 : ctrl
      PORT MAP (
         ins         => q_ins,
         aluop       => aluop,
         ImmWrite    => ImmWrite,
         Jump        => Jump,
         Link        => Link,
         BEQ         => BEQ,
         BNE         => BNE,
         SLT         => SLT,
         MemToReg    => MemToReg,
         MemWrite    => MemWrite,
         RegWrite    => RegWrite,
         AluSrc      => AluSrc,
         RegJump     => RegJump,
         RegSel      => RegSel,
         SignExt     => SignExt,
         ALUSrcShamt => ALUSrcShamt,
         LL          => d_ll1,
         SC          => SC1
      );
   U_55 : ctrl
      PORT MAP (
         ins         => q_ins1,
         aluop       => aluop1,
         ImmWrite    => ImmWrite1,
         Jump        => Jump1,
         Link        => Link1,
         BEQ         => BEQ1,
         BNE         => BNE1,
         SLT         => SLT1,
         MemToReg    => MemToReg1,
         MemWrite    => MemWrite1,
         RegWrite    => RegWrite1,
         AluSrc      => AluSrc1,
         RegJump     => RegJump1,
         RegSel      => RegSel1,
         SignExt     => SignExt1,
         ALUSrcShamt => ALUSrcShamt1,
         LL          => d_ll,
         SC          => SC
      );
   U_44 : dram
      PORT MAP (
         clk           => CLK,
         cpu_addr      => q_result,
         cpu_ren       => q_memtoReg,
         cpu_wdata     => B,
         cpu_wen       => q_memWrite1,
         dready        => dready0,
         dump          => q_halt6,
         invalid_addr  => invalidate_addr0,
         invalidate    => invalidate0,
         mem_rdat      => dataOut0,
         nrst          => nReset,
         snoopAddr     => snoopAddr0,
         cpu_rdata     => dataOut,
         dirtyOut      => dirty0,
         dump_complete => dump_complete,
         dwait         => din0,
         mem_addr      => mem_addr,
         mem_ren       => memRead0,
         mem_wdat      => dataIn0,
         mem_wen       => memWrite0,
         snoopData     => snoopData0,
         snoopHit      => snoopHit0,
         writeAction   => actionWrite0,
         writeAddr     => actionAddr0,
         sc            => q_sc2,
         ll            => ll,
         sc_result     => sc_result1,
         validOut      => valid0
      );
   U_65 : dram
      PORT MAP (
         clk           => CLK,
         cpu_addr      => q_result1,
         cpu_ren       => q_memtoReg1,
         cpu_wdata     => B4,
         cpu_wen       => q_memWrite3,
         dready        => dready1,
         dump          => q_halt3,
         invalid_addr  => invalidate_addr1,
         invalidate    => invalidate1,
         mem_rdat      => dataOut2,
         nrst          => nReset,
         snoopAddr     => snoopAddr1,
         cpu_rdata     => dataOut1,
         dirtyOut      => dirty1,
         dump_complete => dump_complete1,
         dwait         => din6,
         mem_addr      => mem_addr1,
         mem_ren       => memRead1,
         mem_wdat      => dataIn1,
         mem_wen       => memWrite2,
         snoopData     => snoopData1,
         snoopHit      => snoopHit1,
         writeAction   => actionWrite1,
         writeAddr     => actionAddr1,
         sc            => q_sc1,
         ll            => q_ll1,
         sc_result     => sc_result,
         validOut      => valid1
      );
   U_8 : ext16Bit
      PORT MAP (
         signed => SignExt,
         I      => q_ins(15 DOWNTO 0),
         output => output2
      );
   U_53 : ext16Bit
      PORT MAP (
         signed => SignExt1,
         I      => q_ins1(15 DOWNTO 0),
         output => output16
      );
   U_12 : fwdUnit
      PORT MAP (
         pendWr1     => output3,
         pendWr2     => q_regDest,
         pendWr1Data => output12,
         pendWr2Data => output29,
         memToReg1   => memToReg2,
         memToReg2   => dout20,
         regWrite1   => d_regWrite,
         regWrite2   => d_regWrite1,
         rselA       => q_ins(25 DOWNTO 21),
         rdatA       => rdat3,
         rselB       => q_ins(20 DOWNTO 16),
         rdatB       => rdat4,
         Aout        => Aout,
         Bout        => Bout,
         fw2A        => fw2A,
         fw2B        => fw2B,
         loadDep1    => loadDep
      );
   U_67 : fwdUnit
      PORT MAP (
         pendWr1     => output21,
         pendWr2     => q_regDest2,
         pendWr1Data => output25,
         pendWr2Data => output28,
         memToReg1   => dout21,
         memToReg2   => dout22,
         regWrite1   => d_regWrite2,
         regWrite2   => d_regWrite3,
         rselA       => q_ins1(25 DOWNTO 21),
         rdatA       => rdat5,
         rselB       => q_ins1(20 DOWNTO 16),
         rdatB       => rdat6,
         Aout        => Aout1,
         Bout        => Bout1,
         fw2A        => fw2A1,
         fw2B        => fw2B1,
         loadDep1    => loadDep1
      );
   U_40 : icache2
      PORT MAP (
         clk       => CLK,
         memins    => ins0,
         dataready => iready0,
         nrst      => nReset,
         pc        => pc_sig,
         ins       => ins,
         mempc     => mempc,
         pcwait    => nen1,
         iread     => iread
      );
   U_48 : icache2
      PORT MAP (
         clk       => CLK,
         memins    => ins2,
         dataready => iready1,
         nrst      => nReset,
         pc        => pc_sig1,
         ins       => ins1,
         mempc     => mempc1,
         pcwait    => nen2,
         iread     => iread1
      );
   U_3 : mux32
      PORT MAP (
         sel    => dout2,
         I0     => Sout,
         I1     => I1,
         output => output
      );
   U_9 : mux32
      PORT MAP (
         sel    => Jump,
         I0     => q_pc,
         I1     => pcjump,
         output => output1
      );
   U_10 : mux32
      PORT MAP (
         sel    => RegJump,
         I0     => output1,
         I1     => Aout,
         output => output5
      );
   U_19 : mux32
      PORT MAP (
         sel    => dout8,
         I0     => output5,
         I1     => I3,
         output => I1
      );
   U_20 : mux32
      PORT MAP (
         sel    => q_memtoReg,
         I0     => q_result,
         I1     => dataOut,
         output => output9
      );
   U_23 : mux32
      PORT MAP (
         sel    => q_AluSrc,
         I0     => output13,
         I1     => q_B1,
         output => output7
      );
   U_24 : mux32
      PORT MAP (
         sel    => q_AluSrcShamt,
         I0     => output7,
         I1     => q_shamt,
         output => output8
      );
   U_25 : mux32
      PORT MAP (
         sel    => q_fwA,
         I0     => q_A,
         I1     => wdat,
         output => output10
      );
   U_26 : mux32
      PORT MAP (
         sel    => q_fwB,
         I0     => q_B,
         I1     => wdat,
         output => output13
      );
   U_30 : mux32
      PORT MAP (
         sel    => q_immWrite1,
         I0     => I4,
         I1     => B3,
         output => output4
      );
   U_38 : mux32
      PORT MAP (
         sel    => q_SLT2,
         I0     => output4,
         I1     => slt_out1,
         output => I2
      );
   U_39 : mux32
      PORT MAP (
         sel    => q_link1,
         I0     => I2,
         I1     => q_pc3,
         output => output12
      );
   U_43 : mux32
      PORT MAP (
         sel    => dout15,
         I0     => Sout1,
         I1     => I6,
         output => output14
      );
   U_52 : mux32
      PORT MAP (
         sel    => Jump1,
         I0     => q_pc1,
         I1     => pcjump1,
         output => output15
      );
   U_54 : mux32
      PORT MAP (
         sel    => RegJump1,
         I0     => output15,
         I1     => Aout1,
         output => output19
      );
   U_57 : mux32
      PORT MAP (
         sel    => dout13,
         I0     => output19,
         I1     => I5,
         output => I6
      );
   U_71 : mux32
      PORT MAP (
         sel    => q_AluSrc1,
         I0     => output27,
         I1     => q_B2,
         output => output23
      );
   U_72 : mux32
      PORT MAP (
         sel    => q_fwA1,
         I0     => q_A1,
         I1     => wdat1,
         output => output26
      );
   U_73 : mux32
      PORT MAP (
         sel    => q_fwB1,
         I0     => q_B3,
         I1     => wdat1,
         output => output27
      );
   U_74 : mux32
      PORT MAP (
         sel    => q_immWrite2,
         I0     => I8,
         I1     => B7,
         output => output22
      );
   U_76 : mux32
      PORT MAP (
         sel    => q_SLT3,
         I0     => output22,
         I1     => slt_out2,
         output => I7
      );
   U_77 : mux32
      PORT MAP (
         sel    => q_AluSrcShamt1,
         I0     => output23,
         I1     => q_shamt1,
         output => output24
      );
   U_79 : mux32
      PORT MAP (
         sel    => q_link2,
         I0     => I7,
         I1     => q_pc2,
         output => output25
      );
   U_81 : mux32
      PORT MAP (
         sel    => q_memtoReg1,
         I0     => q_result1,
         I1     => dataOut1,
         output => output18
      );
   U_84 : mux32
      PORT MAP (
         sel    => q_sc1,
         I0     => output18,
         I1     => I9,
         output => output28
      );
   U_85 : mux32
      PORT MAP (
         sel    => q_sc2,
         I0     => output9,
         I1     => I10,
         output => output29
      );
   U_14 : mux5
      PORT MAP (
         sel    => RegSel,
         I0     => q_ins(15 DOWNTO 11),
         I1     => q_ins(20 DOWNTO 16),
         output => output6
      );
   U_22 : mux5
      PORT MAP (
         sel    => q_link1,
         I0     => q_regDest1,
         I1     => out31,
         output => output3
      );
   U_68 : mux5
      PORT MAP (
         sel    => RegSel1,
         I0     => q_ins1(15 DOWNTO 11),
         I1     => q_ins1(20 DOWNTO 16),
         output => output17
      );
   U_75 : mux5
      PORT MAP (
         sel    => q_link2,
         I0     => q_regDest3,
         I1     => out32,
         output => output21
      );
   U_1 : pc
      PORT MAP (
         D       => output,
         halt    => dout,
         rstAddr => rstAddr0,
         clk     => CLK,
         nRst    => nReset,
         output  => pc_sig
      );
   U_45 : pc
      PORT MAP (
         D       => output14,
         halt    => dout10,
         rstAddr => rstAddr1,
         clk     => CLK,
         nRst    => nReset,
         output  => pc_sig1
      );
   U_17 : reg_EX_MEM
      PORT MAP (
         clk        => CLK,
         nReset     => nReset,
         nen        => din0,
         noop       => OutZero,
         d_halt     => q_halt1,
         d_regWrite => d_regWrite,
         d_regDest  => output3,
         d_B        => output13,
         d_result   => output12,
         d_memtoReg => d_memtoReg,
         d_memWrite => q_memWrite,
         d_ll       => q_ll2,
         d_sc       => d_sc,
         q_halt     => q_halt2,
         q_regWrite => d_regWrite1,
         q_regDest  => q_regDest,
         q_B        => B,
         q_result   => q_result,
         q_memtoReg => q_memtoReg,
         q_memWrite => q_memWrite1,
         q_ll       => ll,
         q_sc       => q_sc2
      );
   U_80 : reg_EX_MEM
      PORT MAP (
         clk        => CLK,
         nReset     => nReset,
         nen        => din6,
         noop       => OutZero1,
         d_halt     => q_halt5,
         d_regWrite => d_regWrite2,
         d_regDest  => output21,
         d_B        => output27,
         d_result   => output25,
         d_memtoReg => d_memtoReg1,
         d_memWrite => q_memWrite2,
         d_ll       => q_ll,
         d_sc       => q_sc,
         q_halt     => q_halt7,
         q_regWrite => d_regWrite3,
         q_regDest  => q_regDest2,
         q_B        => B4,
         q_result   => q_result1,
         q_memtoReg => q_memtoReg1,
         q_memWrite => q_memWrite3,
         q_ll       => q_ll1,
         q_sc       => q_sc1
      );
   U_6 : reg_ID_EX
      PORT MAP (
         clk           => CLK,
         nReset        => nReset,
         nen           => dout5,
         noop          => loadDep,
         d_halt        => q_halt,
         d_pc          => q_pc,
         d_immWrite    => ImmWrite,
         d_SLT         => SLT,
         d_regWrite    => RegWrite,
         d_link        => Link,
         d_regDest     => output6,
         d_B           => Bout,
         d_shamt       => shamtext,
         d_imm         => output2,
         d_memtoReg    => MemToReg,
         d_memWrite    => MemWrite,
         d_A           => Aout,
         d_AluOp       => aluop,
         d_AluSrcShamt => ALUSrcShamt,
         d_AluSrc      => AluSrc,
         d_fwA         => fw2A,
         d_fwB         => fw2B,
         d_sc          => SC1,
         d_ll          => d_ll1,
         q_sc          => d_sc,
         q_ll          => q_ll2,
         q_halt        => q_halt1,
         q_pc          => q_pc3,
         q_immWrite    => q_immWrite1,
         q_SLT         => q_SLT2,
         q_regWrite    => d_regWrite,
         q_link        => q_link1,
         q_regDest     => q_regDest1,
         q_B           => q_B,
         q_shamt       => q_shamt,
         q_imm         => q_B1,
         q_memtoReg    => d_memtoReg,
         q_memWrite    => q_memWrite,
         q_A           => q_A,
         q_AluSrcShamt => q_AluSrcShamt,
         q_AluSrc      => q_AluSrc,
         q_fwA         => q_fwA,
         q_fwB         => q_fwB,
         q_AluOp       => q_AluOp
      );
   U_69 : reg_ID_EX
      PORT MAP (
         clk           => CLK,
         nReset        => nReset,
         nen           => dout18,
         noop          => loadDep1,
         d_halt        => q_halt4,
         d_pc          => q_pc1,
         d_immWrite    => ImmWrite1,
         d_SLT         => SLT1,
         d_regWrite    => RegWrite1,
         d_link        => Link1,
         d_regDest     => output17,
         d_B           => Bout1,
         d_shamt       => shamtext1,
         d_imm         => output16,
         d_memtoReg    => MemToReg1,
         d_memWrite    => MemWrite1,
         d_A           => Aout1,
         d_AluOp       => aluop1,
         d_AluSrcShamt => ALUSrcShamt1,
         d_AluSrc      => AluSrc1,
         d_fwA         => fw2A1,
         d_fwB         => fw2B1,
         d_sc          => SC,
         d_ll          => d_ll,
         q_sc          => q_sc,
         q_ll          => q_ll,
         q_halt        => q_halt5,
         q_pc          => q_pc2,
         q_immWrite    => q_immWrite2,
         q_SLT         => q_SLT3,
         q_regWrite    => d_regWrite2,
         q_link        => q_link2,
         q_regDest     => q_regDest3,
         q_B           => q_B3,
         q_shamt       => q_shamt1,
         q_imm         => q_B2,
         q_memtoReg    => d_memtoReg1,
         q_memWrite    => q_memWrite2,
         q_A           => q_A1,
         q_AluSrcShamt => q_AluSrcShamt1,
         q_AluSrc      => q_AluSrc1,
         q_fwA         => q_fwA1,
         q_fwB         => q_fwB1,
         q_AluOp       => q_AluOp1
      );
   U_0 : reg_IF_ID
      PORT MAP (
         clk    => CLK,
         nReset => nReset,
         nen    => dout4,
         noop   => dout2,
         d_halt => halt1,
         d_pc   => Sout,
         d_ins  => ins,
         q_halt => q_halt,
         q_pc   => q_pc,
         q_ins  => q_ins
      );
   U_50 : reg_IF_ID
      PORT MAP (
         clk    => CLK,
         nReset => nReset,
         nen    => dout17,
         noop   => dout15,
         d_halt => halt2,
         d_pc   => Sout1,
         d_ins  => ins1,
         q_halt => q_halt4,
         q_pc   => q_pc1,
         q_ins  => q_ins1
      );
   U_18 : reg_MEM_WB
      PORT MAP (
         clk        => CLK,
         nReset     => nReset,
         nen        => din0,
         noop       => OutZero,
         d_halt     => q_halt2,
         d_regWrite => d_regWrite1,
         d_regDest  => q_regDest,
         d_Q        => output29,
         q_halt     => q_halt6,
         q_regWrite => q_regWrite,
         q_regDest  => output11,
         q_Q        => wdat
      );
   U_82 : reg_MEM_WB
      PORT MAP (
         clk        => CLK,
         nReset     => nReset,
         nen        => din6,
         noop       => OutZero1,
         d_halt     => q_halt7,
         d_regWrite => d_regWrite3,
         d_regDest  => q_regDest2,
         d_Q        => output28,
         q_halt     => q_halt3,
         q_regWrite => q_regWrite1,
         q_regDest  => output20,
         q_Q        => wdat1
      );
   U_11 : registerFile
      PORT MAP (
         wdat   => wdat,
         wsel   => output11,
         wen    => q_regWrite,
         clk    => CLK,
         nReset => nReset,
         rsel1  => q_ins(25 DOWNTO 21),
         rsel2  => q_ins(20 DOWNTO 16),
         rdat1  => rdat3,
         rdat2  => rdat4
      );
   U_63 : registerFile
      PORT MAP (
         wdat   => wdat1,
         wsel   => output20,
         wen    => q_regWrite1,
         clk    => CLK,
         nReset => nReset,
         rsel1  => q_ins1(25 DOWNTO 21),
         rsel2  => q_ins1(20 DOWNTO 16),
         rdat1  => rdat5,
         rdat2  => rdat6
      );

END struct;
