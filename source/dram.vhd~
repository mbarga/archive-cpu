-- VHDL Entity project2_lib.dram.symbol
--
-- Created:
--          by - mg217.bin (cparch05.ecn.purdue.edu)
--          at - 21:03:44 04/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY dram IS
   PORT( 
      clk           : IN     std_logic;
      cpu_addr      : IN     std_logic_vector (31 DOWNTO 0);
      cpu_ren       : IN     std_logic;
      cpu_wdata     : IN     std_logic_vector (31 DOWNTO 0);
      cpu_wen       : IN     std_logic;
      dready        : IN     std_logic;
      dump          : IN     std_logic;
      invalid_addr  : IN     std_logic_vector (31 DOWNTO 0);
      invalidate    : IN     std_logic;
      mem_rdat      : IN     std_logic_vector (31 DOWNTO 0);
      nrst          : IN     std_logic;
      snoopAddr     : IN     std_logic_vector (31 DOWNTO 0);
      cpu_rdata     : OUT    std_logic_vector (31 DOWNTO 0);
      dirtyOut      : OUT    std_logic;
      dump_complete : OUT    std_logic;
      dwait         : OUT    std_logic;
      mem_addr      : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      mem_ren       : OUT    std_logic;
      mem_wdat      : OUT    std_logic_vector (31 DOWNTO 0);
      mem_wen       : OUT    std_logic;
      snoopData     : OUT    std_logic_vector (31 DOWNTO 0);
      snoopHit      : OUT    std_logic;
      validOut      : OUT    std_logic
   );

-- Declarations

END dram ;

--
-- VHDL Architecture project2_lib.dram.struct
--
-- Created:
--          by - mg217.bin (cparch05.ecn.purdue.edu)
--          at - 21:03:44 04/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY project2_lib;

ARCHITECTURE struct OF dram IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL clean0    : std_logic;
   SIGNAL clean1    : std_logic;
   SIGNAL dirty0    : std_logic;
   SIGNAL dirty1    : std_logic;
   SIGNAL hit0      : std_logic;
   SIGNAL hit1      : std_logic;
   SIGNAL index     : std_logic_vector(3 DOWNTO 0);
   SIGNAL rdat0     : std_logic_vector(31 DOWNTO 0);
   SIGNAL rdat1     : std_logic_vector(31 DOWNTO 0);
   SIGNAL tag_dump0 : std_logic_vector(24 DOWNTO 0);
   SIGNAL tag_dump1 : std_logic_vector(24 DOWNTO 0);
   SIGNAL valid0    : std_logic;
   SIGNAL valid1    : std_logic;
   SIGNAL wdat      : std_logic_vector(31 DOWNTO 0);
   SIGNAL wen0      : std_logic;
   SIGNAL wen1      : std_logic;
   SIGNAL word_sel  : std_logic;


   -- Component Declarations
   COMPONENT dram_array
   PORT (
      clean        : IN     std_logic;
      clk          : IN     std_logic;
      index        : IN     std_logic_vector (3 DOWNTO 0);
      invalid_addr : IN     std_logic_vector (31 DOWNTO 0);
      invalidate   : IN     std_logic;
      nrst         : IN     std_logic;
      set          : IN     std_logic;
      snoopAddr    : IN     std_logic_vector (31 DOWNTO 0);
      tag          : IN     std_logic_vector (24 DOWNTO 0);
      wdat         : IN     std_logic_vector (31 DOWNTO 0);
      wen          : IN     std_logic;
      dirty_out    : OUT    std_logic;
      hit          : OUT    std_logic;
      rdat         : OUT    std_logic_vector (31 DOWNTO 0);
      snoopData    : OUT    std_logic_vector (31 DOWNTO 0);
      snoopHit     : OUT    std_logic;
      tag_dump     : OUT    std_logic_vector (24 DOWNTO 0);
      valid_out    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT dram_ctrl
   PORT (
      clk           : IN     std_logic;
      cpu_addr      : IN     std_logic_vector (31 DOWNTO 0);
      cpu_ren       : IN     std_logic;
      cpu_wdata     : IN     std_logic_vector (31 DOWNTO 0);
      cpu_wen       : IN     std_logic;
      dirty0        : IN     std_logic;
      dirty1        : IN     std_logic;
      dready        : IN     std_logic;
      dump          : IN     std_logic;
      hit0          : IN     std_logic;
      hit1          : IN     std_logic;
      mem_rdat      : IN     std_logic_vector (31 DOWNTO 0);
      nrst          : IN     std_logic;
      rdat0         : IN     std_logic_vector (31 DOWNTO 0);
      rdat1         : IN     std_logic_vector (31 DOWNTO 0);
      tag_dump0     : IN     std_logic_vector (24 DOWNTO 0);
      tag_dump1     : IN     std_logic_vector (24 DOWNTO 0);
      valid0        : IN     std_logic;
      valid1        : IN     std_logic;
      clean0        : OUT    std_logic;
      clean1        : OUT    std_logic;
      cpu_rdata     : OUT    std_logic_vector (31 DOWNTO 0);
      dirtyOut      : OUT    std_logic;
      dump_complete : OUT    std_logic;
      dwait         : OUT    std_logic;
      index         : OUT    std_logic_vector (3 DOWNTO 0);
      mem_addr      : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      mem_ren       : OUT    std_logic;
      mem_wdat      : OUT    std_logic_vector (31 DOWNTO 0);
      mem_wen       : OUT    std_logic;
      validOut      : OUT    std_logic;
      wdat          : OUT    std_logic_vector (31 DOWNTO 0);
      wen0          : OUT    std_logic;
      wen1          : OUT    std_logic;
      word_sel      : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : dram_array USE ENTITY project2_lib.dram_array;
   FOR ALL : dram_ctrl USE ENTITY project2_lib.dram_ctrl;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : dram_array
      PORT MAP (
         wdat         => wdat,
         wen          => wen0,
         set          => word_sel,
         tag          => cpu_addr(31 DOWNTO 7),
         tag_dump     => tag_dump0,
         invalid_addr => invalid_addr,
         invalidate   => invalidate,
         index        => index,
         snoopData    => snoopData,
         snoopAddr    => snoopAddr,
         snoopHit     => snoopHit,
         rdat         => rdat0,
         dirty_out    => dirty0,
         valid_out    => valid0,
         clean        => clean0,
         hit          => hit0,
         clk          => clk,
         nrst         => nrst
      );
   U_3 : dram_array
      PORT MAP (
         wdat         => wdat,
         wen          => wen1,
         set          => word_sel,
         tag          => cpu_addr(31 DOWNTO 7),
         tag_dump     => tag_dump1,
         invalid_addr => invalid_addr,
         invalidate   => invalidate,
         index        => index,
         snoopData    => snoopData,
         snoopAddr    => snoopAddr,
         snoopHit     => snoopHit,
         rdat         => rdat1,
         dirty_out    => dirty1,
         valid_out    => valid1,
         clean        => clean1,
         hit          => hit1,
         clk          => clk,
         nrst         => nrst
      );
   U_0 : dram_ctrl
      PORT MAP (
         dirty0        => dirty0,
         dirty1        => dirty1,
         valid0        => valid0,
         valid1        => valid1,
         wdat          => wdat,
         rdat0         => rdat0,
         rdat1         => rdat1,
         tag_dump0     => tag_dump0,
         tag_dump1     => tag_dump1,
         index         => index,
         clean0        => clean0,
         wen0          => wen0,
         clean1        => clean1,
         wen1          => wen1,
         word_sel      => word_sel,
         dirtyOut      => dirtyOut,
         validOut      => validOut,
         dump          => dump,
         dump_complete => dump_complete,
         hit0          => hit0,
         hit1          => hit1,
         dwait         => dwait,
         cpu_rdata     => cpu_rdata,
         cpu_addr      => cpu_addr,
         cpu_wdata     => cpu_wdata,
         cpu_ren       => cpu_ren,
         cpu_wen       => cpu_wen,
         mem_addr      => mem_addr,
         mem_wdat      => mem_wdat,
         mem_wen       => mem_wen,
         mem_ren       => mem_ren,
         mem_rdat      => mem_rdat,
         dready        => dready,
         clk           => clk,
         nrst          => nrst
      );

END struct;
